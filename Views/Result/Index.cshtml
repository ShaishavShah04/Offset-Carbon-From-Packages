@model CarbonOffset.Models.Result

@{
    ViewData["Title"] = "Results";
}

<h1 id="title_tnum">Tracking #: <span class="t_num gradientGtoB">@Model.TrackingNumber</span></h1>
<hr />

<div>

    <div id="info" class="row">

        <dl class="col-md-3">
            <dt class="col-8">Origin City: </dt>
            <dd class="col-4">@Model.StartingCity</dd>

            <dt class="col-8">Origin Country: </dt>
            <dd class="col-4">@Model.StartCountry</dd>
        </dl>

        <div class="flex-column col-md-6">
            <div>
                <p class="h1 gradientOtoR center">@Model.Distance KM</p>
            </div>
            <div id="arrow"></div>
            <div>
                <p class="h1 gradientOtoR center">$@Model.Cost</p>
            </div>
        </div>

        <dl class="col-md-3">

            <dt class="col-8">Destination City: </dt>
            <dd class="col-4">@Model.DestinationCity</dd>
            
            <dt class="col-8">Destination Country: </dt>
            <dd class="col-4">@Model.DestinationCountry</dd>
       
        </dl>
    </div>

    <hr />

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==" crossorigin=""/>
    <script type='text/javascript' src='//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js'></script>
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==" crossorigin=""></script>
    <script src="https://elfalem.github.io/Leaflet.curve/src/leaflet.curve.js"></script>
    <div id="map" style="height: 440px; border: 1px solid #AAA;"></div>

    <script>
        var markers = [
            {
                "city": "@Model.StartingCity",
                "country": "@Model.StartCountry",
                "lat": @Model.StartLat,
                "lng": @Model.StartLon
            },
            {
                "city": "@Model.DestinationCity",
                "country": "@Model.DestinationCountry",
                "lat": @Model.DestLat,
                "lng": @Model.DestLon
            }
        ];

        var map = L.map( 'map', {
            center: [20.0, 5.0],
            minZoom: 2,
            zoom: 2,
            worldCopyJump: true,
        });

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
            subdomains: ['a','b','c']
        }).addTo( map );

        var boundsMarker = [];

        for ( var i=0; i < markers.length; ++i ) 
        {
           L.marker( [markers[i].lat, markers[i].lng] )
              .bindPopup( '<a href="' + markers[i].url + '" target="_blank" rel="noopener">' + markers[i].name + '</a>' )
              .addTo( map );
           boundsMarker.push([markers[i].lat, markers[i].lng]);
        }

        map.fitBounds(boundsMarker);
        map.setMaxBounds(boundsMarker);
        map.setMinZoom(map.minZoom);

        var latlngs = [];

        var latlng1 = [23.634501, -102.552783], latlng2 = [17.987557, -92.929147];

        // var offsetX = latlng2[1] - latlng1[1], offsetY = latlng2[0] - latlng1[0];
        var offsetX = @Model.DestLon - @Model.StartLon, offsetY = @Model.DestLat - @Model.StartLat;

        var r = Math.sqrt(Math.pow(offsetX, 2) + Math.pow(offsetY, 2)),
          theta = Math.atan2(offsetY, offsetX);

        var thetaOffset = (3.14 / 10);

        var r2 = (r / 2) / (Math.cos(thetaOffset)), theta2 = theta + thetaOffset;

        // var midpointX = (r2 * Math.cos(theta2)) + latlng1[1], midpointY = (r2 * Math.sin(theta2)) + latlng1[0];
        var midpointX = (r2 * Math.cos(theta2)) + @Model.StartLon, midpointY = (r2 * Math.sin(theta2)) + @Model.StartLat;

        var midpointLatLng = [midpointY, midpointX];

        // latlngs.push(latlng1, midpointLatLng, latlng2);
        latlngs.push([@Model.StartLat, @Model.StartLon], midpointLatLng, [@Model.DestLat, @Model.DestLon]);

        var pathOptions = {
          color: 'blue',
          weight: 5,
          opacity: 0.5,
          dashed: true,
        }

        var curvedPath = L.curve(
        [
        'M', [@Model.StartLat, @Model.StartLon],
        'Q', midpointLatLng,
        [@Model.DestLat, @Model.DestLon]
        ], pathOptions).addTo(map);

    </script>
    
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>
